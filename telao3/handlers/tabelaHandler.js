// Arquivo tabelaHandler.js

/**
 * Fun√ß√£o para retornar a tabela de pre√ßos.
 * @returns {string} - A tabela de pre√ßos formatada.
 */
const getTabelaPrecos = () => {
    return `> ‚ìò *‚ùóüõëMEGABYTE* *VODACOM*

*üí°ESTAMOS DISPON√çVEIS DAS 6H √ÄS 23:00*

*TABELA ATUALIZADA* 04/05/2025

üïìValidade: 1 dia
20MT    üì∂  1.100MB
30MT    üì∂  1.650MB
40MT    üì∂  2.200MB
50MT    üì∂  2.750MB 
60MT    üì∂  3.300MB
80MT    üì∂  4.400MB
100MT  üì∂  5.500MB
180MT  üì∂  10.000MB
280MT  üì∂  15.000MB
360MT  üì∂  20.000MB


*üóìÔ∏èMENSAL 30DIAS*
 130MT   üì∂  5.000MB 
 150MT   üì∂  6.100MB
170MT    üì∂  7.200MB
210MT    üì∂  9.400MB
260MT    üì∂  10.500MB
520MT    üì∂   20.000MB
1150MT  üì∂   50.250MB

> üöÄ _Conectando pessoas,_
> üöÄ _compartilhando megabytes!_


üìû TUDO TOP VODACOM 

üìçchamadas e SMS ilimitadas para todas redes

üìÜ30 dias Tudo top


450MT üî• Chamadas + SMS ilimitadas + 9.5GB  +10min
Int+30MB Roam

550MT üî• Chamadas + SMS ilimitadas + 12.5GB  +10min
Int+30MB Roam

650MT üî• Chamadas + SMS ilimitadas + 15.5GB  +10min
Int+30MB Roam

850MT üî• Chamadas + SMS ilimitadas + 27.5GB  +10min
Int+30MB Roam

1050MT üî• Chamadas + SMS ilimitadas + 25.5GB  +10min
Int+30MB Roam
`.trim();
};

/**
 * Fun√ß√£o para enviar a tabela de pre√ßos ao grupo.
 * @param {Object} sock - Cliente Baileys.
 * @param {Object} msg - Mensagem recebida.
 */
const handleTabela = async (sock, msg) => {
    const from = msg.key.remoteJid;

    try {
        console.log(`‚úÖ Enviando tabela de pre√ßos para o grupo ${from}`);

        // Obt√©m os metadados do grupo para listar os participantes
        const groupMetadata = await sock.groupMetadata(from).catch(() => null);
        if (!groupMetadata) {
            return sock.sendMessage(from, { text: '‚ùå Este comando s√≥ funciona em grupos!' });
        }

        const participants = groupMetadata.participants.map(p => p.id); // Lista de IDs dos participantes

        // Mensagem inicial com men√ß√£o a todos os participantes
        const mensagemInicial = `üì¢ ATEN√á√ÉO, MEMBROS DO GRUPO!`;

        // Envia a mensagem inicial com men√ß√µes
        await sock.sendMessage(from, {
            text: mensagemInicial,
            mentions: participants, // Menciona todos os participantes
        });

        // Aguarda 4 segundos antes de enviar a tabela
        await new Promise(resolve => setTimeout(resolve, 4000));

        // Obt√©m a tabela de pre√ßos
        const tabelaPrecos = getTabelaPrecos();

        // Divide a tabela de pre√ßos em partes menores (m√°ximo de 1000 caracteres por parte)
        const maxCharsPerMessage = 1000; // Limite de caracteres por mensagem
        const partes = [];

        for (let i = 0; i < tabelaPrecos.length; i += maxCharsPerMessage) {
            partes.push(tabelaPrecos.substring(i, i + maxCharsPerMessage));
        }

        // Envia cada parte separadamente
        for (const parte of partes) {
            await sock.sendMessage(from, { text: parte });
            await new Promise(resolve => setTimeout(resolve, 1000)); // Aguarda 1 segundo entre mensagens
        }

        console.log(`‚úÖ Tabela de pre√ßos enviada em ${partes.length} parte(s).`);
    } catch (error) {
        console.error('üö® Erro ao enviar tabela de pre√ßos:', error);
        await sock.sendMessage(from, { text: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde.' });
    }
};

// Exporta a fun√ß√£o handleTabela
module.exports = { handleTabela };